#include <iostream>
#include <cstdint>
#include <memory>

template<typename type>

class List
{
public:
  struct element
  {
    type value;
    //element *next;
    std::shared_ptr<element> next = std::make_shared<element>();
    element();
  };

  //element *first;
  std::shared_ptr<element> first = std::make_shared<element>();
  void pushBack(type value)
  {
    //element *new_element = new element;
    std::shared_ptr<element> new_element = std::make_shared<element>();

    new_element -> value = value;

    if(first == 0)
    {
      first = new_element;
    }
    else
    {
      //element *tmp = first;
      std::shared_ptr<element> tmp = std::make_shared<element>();
      tmp = next;

      while (tmp -> next) {
          tmp = tmp -> next;
      }

      tmp -> next = new_element;
      new_element -> next = 0;
      }
  }

  void print()
  {
    //element *tmp = first;
    std::shared_ptr<element> tmp;
    *tmp = first;

    while(tmp)
    {
      std::cout << "value:" << tmp -> value;
      tmp = tmp -> next;
    }
  }

  int size()
  {
    //element *tmp = first;
    std::shared_ptr<element> tmp;
    *tmp = first;

    int size = 0;

    while(tmp)
    {
      ++size;
      tmp = tmp -> next;
    }
    return size;
  }

  List();
};

int main()
{
  List<float> list1;
  list1.pushBack(0.420);
  list1.pushBack(6.9);
  list1.pushBack(420.69);
  list1.pushBack(66.6);
  list1.pushBack(88.0);
  list1.pushBack(7.77);
  list1.print();
  std::cout << list1.size();

  return 0;
}
